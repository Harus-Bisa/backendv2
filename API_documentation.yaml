openapi: "3.0.0"
info:
  title: Review Guru API
  description: Back end API for Review Guru
  version: 0.0.1

servers:
  - url: http://localhost:8000
    description: Development server
  
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginResponse:
      properties:
        token:
          type: string
          example: '300b524e1b87374b56af68cd6b54aef7a65fda38'
        userId:
          type: string
          example: '5db6093a7f75df3ce6c12095'
          
    Review:
      properties:
        reviewId:
          type: string
          example: '5db492c349a67b33b8d0a2a2'
        courseName:
          type: string
          example: 'Brand Management 101'
        overallRating:
          type: number
          example: 4.5
        recommendationRating:
          type: number
          example: 2.5
        difficultyRating:
          type: number
          example: 3.5
        textbookRequired:
          type: boolean
          example: true
        yearTaken:
          type: integer
          example: 2015
        review:
          type: string
          example: 'This class is so easy and the professor teaching style makes me understand the course material easily.'
        helpfulUpVote:
          type: integer
          example: 25
        helpfulDownVote:
          type: integer
          example: 2
        tags:
          type: array
          items:
            type: string
          example: ['caring', 'young', 'easy class']
      
    User:
      allOf:
        - $ref: '#/components/schemas/UserMatch'
        - type: object
          properties:
            overallRating:
              type: number
              example: 4.5
            recommendationRating:
              type: number
              example: 5
            difficultyRating:
              type: number
              example: 4.5
            numberOfReviews:
              type: string
              example: 12
            reviews:
              type: array
              items:
                $ref: '#/components/schemas/Review'

    UserMatch:
      properties:
        userId:
          type: string
          example: '5db492c349a67b33b8d0a2a2'
        name:
          type: string
          example: 'Timothy Bryan'
        school:
          type: string
          example: 'Universitas Prasetya Mulya'

paths:
  /signup:
    post:
      summary: Create a new user
      tags: 
      - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
             type: object
             required:
              - name
              - email
              - password
             properties:
              name:
                type: string
                example: 'Wilson Burnawan'
              email:
                type: string
                format: email
                example: 'wilson.burnawan@uiuc.edu'
              password:
                type: string
                example: '123abc'
      responses:
        '201':
          description: Create user is successful
        '500':
          description: There was an error creating the user
  
  /login:
    post:
      summary: Login to get authorization token
      tags:
      - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
              - email
              - password
              properties:
                email:
                  type: string
                  format: email
                  example: 'wilson.burnawan@uiuc.edu'
                password:
                  type: string
                  example: '123abc'
      responses:
        '200':
          description: Login is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Please provide correct email and password
        '500':
          description: There was an error logging in
  
  /reviews:
    post:
      summary: Create a new review for new user.
      tags: 
      - General
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
             type: object
             required:
              - name
              - school
              - courseName
              - overallRating
              - recommendationRating
              - difficultyRating
              - grade
              - yearTaken
              - review
              - tags
              - textbookRequired
             properties:
              name:
                type: string
                example: 'Wilson Burnawan'
              school:
                type: string
                example: 'Universitas Prasetya Mulya'
              courseName:
                type: string
                example: 'Brand Management 101'
              overallRating:
                type: number
                example: 4.5
              recommendationRating:
                type: number
                example: 2.5
              difficultyRating:
                type: number
                example: 3.5
              textbookRequired:
                type: boolean
                example: true
              yearTaken:
                type: integer
                example: 2015
              review:
                type: string
                example: 'This class is so easy and the professor teaching style makes me understand the course material easily.'
              tags:
                type: array
                items:
                  type: string
                example: ['caring', 'young', 'easy class']       
      responses:
        '201':
          description: Create review for new user is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: There was an error creating a review for new user.
          
  /users:
    get:
      summary: Get list of a users matching the query.
      tags:
        - General
      parameters: 
        - in: query
          name: name
          description: Name of the user.
          schema:
            type: string
            example: 'Timothy Bryan'
      responses:
        '200':
          description: Get list of users matching the query is successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserMatch'
        '500':
          description: There was an error getting the users matching the query.
          
  /users/{userId}/reviews:
    post:
      summary: Create a new review for a user.
      tags: 
      - Specific User
      security:
        - bearerAuth: []
      parameters: 
        - in: path
          required: true
          name: userId
          description: Id of the user being reviewed.
          schema:
            type: string
            example: '5db492c349a67b33b8d0a2a2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
             type: object
             required:
              - courseName
              - overallRating
              - recommendationRating
              - difficultyRating
              - grade
              - yearTaken
              - review
              - tags
              - textbookRequired
             properties:
              courseName:
                type: string
                example: 'Brand Management 101'
              overallRating:
                type: number
                example: 4.5
              recommendationRating:
                type: number
                example: 2.5
              difficultyRating:
                type: number
                example: 3.5
              textbookRequired:
                type: boolean
                example: true
              yearTaken:
                type: integer
                example: 2015
              review:
                type: string
                example: 'This class is so easy and the professor teaching style makes me understand the course material easily.'
              tags:
                type: array
                items:
                  type: string
                example: ['caring', 'young', 'easy class']
      responses:
        '201':
          description: Create review for a user is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '500':
          description: There was an error creating the review.

    get:
      summary: Get list of a user's reviews.
      tags:
        - Specific User
      parameters: 
        - in: path
          required: true
          name: userId
          description: Id of the user being reviewed.
          schema:
            type: string
            example: '5db492c349a67b33b8d0a2a2'
      responses:
        '200':
          description: Get list of reviews is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
        '500':
          description: There was an error getting the user's reviews.
          
  /users/{userId}/reviews/{reviewId}/{upOrDownVote}:
    post:
      summary: Add helpfulness vote to review.
      tags: 
      - Specific User
      security:
        - bearerAuth: []
      parameters: 
        - in: path
          required: true
          name: userId
          description: Id of the user being reviewed.
          schema:
            type: string
            example: '5db492c349a67b33b8d0a2a2'
        - in: path
          required: true
          name: reviewId
          description: Id of the review.
          schema:
            type: string
            example: '5db492c349a67b33b8d0a2a2'
        - in: path
          required: true
          name: upOrDownVote
          description: Option to add up or down vote.
          schema:
            type: string
            enum: ['upVote', 'downVote']
      responses:
        '201':
          description: Add helpfulness vote to review is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Review not found.
        '500':
          description: There was an error adding helpfullness vote to the review.
